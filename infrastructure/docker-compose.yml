version: '3.5'

services:
  postgres:
    container_name: pg_container
    image: postgres:12-bullseye
    platform: linux/arm64/v8
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DATABASE}
      PGDATA: ${PG_DATA}
    volumes:
      - "./Data/postgres-mlflow-data/:${PG_DATA}"
    ports:
      - "${PG_PORT}:5432"
    networks:
      - postgres
    hostname: postgres
    restart: unless-stopped
  
  pg_admin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      - "PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}"
      - "PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}"
      - "PGADMIN_PORT=${PGADMIN_PORT}"
    volumes:
      - "./Data/pgadmin-data/:/root/.pgadmin"
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - postgres
    networks:
      - postgres
    hostname: pgadmin
    restart: unless-stopped
  
  # data_science:
    # container_name: data_science_container
    # image: ds:tf_latest
    # working_dir: /jupyter
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           device_ids: ['0']
    #           capabilities: [gpu]
    # environment:
      # JUPYTER_ENABLE_LAB: "yes"
      # CHOWN_HOME: "yes"
      # AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      # AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      # AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      # AWS_S3_ENDPOINT: "http://minio:${MINIO_PORT}"
      # MLFLOW_TRACKING_URI: "http://mlflow:${MLFLOW_PORT}"
      # MLFLOW_S3_ENDPOINT_URL: "http://minio:${MINIO_PORT}"
    # volumes:
      # - ./Data/jupyter-data:/jupyter
    # ports:
      # - "${JUPYTER_PORT}:8888"
    # networks:
      # - postgres
    # hostname: data_science
    # restart: unless-stopped
    # entrypoint: "jupyter lab --ip 0.0.0.0 --allow-root --NotebookApp.token='' --NotebookApp.password=''"
  data_science2:
    container_name: data_science_container2
    image: nvcr.io/nvidia/pytorch:23.07-py3
    working_dir: /jupyter
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0', ]
              capabilities: [gpu]
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      CHOWN_HOME: "yes"
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_S3_ENDPOINT: "http://minio:${MINIO_PORT}"
      MLFLOW_TRACKING_URI: "http://mlflow:${MLFLOW_PORT}"
      MLFLOW_S3_ENDPOINT_URL: "http://minio:${MINIO_PORT}"
    volumes:
      - ./Data/jupyter-data:/jupyter
    ports:
      - "${JUPYTER_PORT}:8888"
    networks:
      - postgres
    hostname: data_science
    restart: unless-stopped
    entrypoint: "jupyter lab --ip 0.0.0.0 --allow-root --NotebookApp.token='' --NotebookApp.password=''"
    
  mlflow:
    container_name: mlflow_container
    image: mlflow:mlflow-latest
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      MLFLOW_S3_ENDPOINT_URL: "http://minio:${MINIO_PORT}"
    volumes:
      - ./Data/mlflow-data:/data
    ports:
      - "${MLFLOW_PORT}:5000"
    depends_on:
      - postgres
    networks:
      - postgres
    hostname: mlflow
    restart: unless-stopped
    command: 
      - sh    # (sh allows for var substitution of BACKEND and ARTIFACTS)
      - -c
      - mlflow server 
          --backend-store-uri ${MLFLOW_BACKEND_STORE_URI}
          --default-artifact-root ${MLFLOW_ARTIFACTS_ROOT_URI}
          --host ${MLFLOW_HOST}
          # --port ${MLFLOW_PORT}
          # --gunicorn-opts "--timeout 180"
  minio:
    container_name: minio_container
    image: 'minio/minio:latest'
    platform: linux/arm64
    environment:
      MINIO_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      MINIO_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_PORT: ${MINIO_PORT}
    volumes:
      - ./Data/minio-data:/data
    ports:
      - "${MINIO_PORT}:9000"
      - "9001:9001"
    networks:
      - postgres
    hostname: minio
    restart: unless-stopped
    command: server /data --console-address ":9001" 

  neo4j:
    container_name: neo4j_container
    image: neo4j:community
    platform: linux/arm64/v8
    environment:
      - "NEO4J_ACCEPT_LICENSE_AGREEMENT=yes"
      - "NEO4J_AUTH=neo4j/neo"
      - "NEO4JLABS_PLUGINS=apoc,n10s,graph-data-science"
      - "NEO4J_dbms_security_procedures_unrestricted=apoc.*,algo.*,gds.*,n10s.*"
      - "NEO4J_dbms_security_procedures_whitelist=apoc.*,algo.*,gds.*,n10s.*"
    volumes:
      - ./plugins:/plugins
      - ./Data/neo4j-data/:/import
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - postgres
    hostname: neo4j
    restart: unless-stopped

networks:
  postgres:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  data_science:
  mlflow:
  minio:
  neo4j:


